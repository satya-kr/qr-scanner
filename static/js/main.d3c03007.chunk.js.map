{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","conatiner","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","useState","result","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","classes","qrRef","useRef","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","Card","CardContent","href","target","delay","onError","err","alert","error","onScan","data","setState","style","width","Grid","container","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","value","Button","variant","onClick","download","src","alt","current","openImageDialog","ref","legacyMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3c03007.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Container, Card, CardContent, makeStyles, Grid, TextField, Button } from '@material-ui/core';\nimport QRCode from 'qrcode';\nimport QrReader from 'react-qr-reader';\n\n\nfunction App() {\n    const [result, setResult] = useState('no result');\n    const [text, setText] = useState('');\n    const [imageUrl, setImageUrl] = useState('');\n    const [scanResultFile, setScanResultFile] = useState('');\n    const [scanResultWebCam, setScanResultWebCam] = useState('');\n    const classes = useStyles();\n    const qrRef = useRef(null);\n\n\n    const generateQrCode = async () => {\n        try {\n            const response = await QRCode.toDataURL(text);\n            setImageUrl(response);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    const handleErrorFile = (error) => {\n        console.log(error);\n    }\n    const handleScanFile = (result) => {\n        if (result) {\n            setScanResultFile(result);\n        }\n    }\n    const onScanFile = () => {\n        qrRef.current.openImageDialog();\n    }\n    const handleErrorWebCam = (error) => {\n        console.log(error);\n    }\n    const handleScanWebCam = (result) => {\n        if (result) {\n            setScanResultWebCam(result);\n        }\n    }\n    const handleScan = data => {\n        if (data) {\n            this.setState({\n                result: data\n            })\n        }\n    }\n    const handleError = err => {\n        alert(err);\n        console.error(err)\n    }\n    return (\n        <Container className={classes.conatiner}>\n            <Card>\n                <h2 className={classes.title}>Generate Download & Scan QR Code with React js</h2>\n                <CardContent>\n                    <a href=\"https://ikti8.csb.app/\" target=\"_blank\"> click Me</a>\n                    <QrReader\n                        delay={300}\n                        onError={handleError}\n                        onScan={handleScan}\n                        style={{ width: '100%' }}\n                    />\n                    <p>{result}</p>\n                    <Grid container spacing={2}>\n                        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                            <TextField label=\"Enter Text Here\" onChange={(e) => setText(e.target.value)} />\n                            <Button className={classes.btn} variant=\"contained\"\n                                color=\"primary\" onClick={() => generateQrCode()}>Generate</Button>\n                            <br />\n                            <br />\n                            <br />\n                            {imageUrl ? (\n                                <a href={imageUrl} download>\n                                    <img src={imageUrl} alt=\"img\" />\n                                </a>) : null}\n                        </Grid>\n                        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                            <Button className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\n                            <QrReader\n                                ref={qrRef}\n                                delay={300}\n                                style={{ width: '100%' }}\n                                onError={handleErrorFile}\n                                onScan={handleScanFile}\n                                legacyMode\n                            />\n                            <h3>Scanned Code: {scanResultFile}</h3>\n                        </Grid>\n                        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                            <h3>Qr Code Scan by Web Cam</h3>\n                            <QrReader\n                                delay={300}\n                                style={{ width: '100%' }}\n                                onError={handleErrorWebCam}\n                                onScan={handleScanWebCam}\n                            />\n                            <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        </Container>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    conatiner: {\n        marginTop: 10\n    },\n    title: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        background: '#3f51b5',\n        color: '#fff',\n        padding: 20\n    },\n    btn: {\n        marginTop: 10,\n        marginBottom: 20\n    }\n}));\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}